import os.path, os
from ftplib import FTP, error_perm
from PyQt5 import QtCore, QtGui, QtWidgets

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(493, 573)
        MainWindow.setMouseTracking(True)
        MainWindow.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        MainWindow.setAcceptDrops(True)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("ftp-icon-27.jpg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setAutoFillBackground(True)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.IP = QtWidgets.QLineEdit(self.centralwidget)
        self.IP.setInputMask("")
        self.IP.setText("")
        self.IP.setDragEnabled(True)
        self.IP.setClearButtonEnabled(True)
        self.IP.setObjectName("IP")
        self.horizontalLayout.addWidget(self.IP)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.ID = QtWidgets.QLineEdit(self.centralwidget)
        self.ID.setDragEnabled(True)
        self.ID.setClearButtonEnabled(True)
        self.ID.setObjectName("ID")
        self.horizontalLayout.addWidget(self.ID)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.pswd = QtWidgets.QLineEdit(self.centralwidget)
        self.pswd.setDragEnabled(True)
        self.pswd.setClearButtonEnabled(True)
        self.pswd.setObjectName("pswd")
        self.horizontalLayout.addWidget(self.pswd)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.Connect = QtWidgets.QPushButton(self.centralwidget)
        self.Connect.setObjectName("Connect")
        self.horizontalLayout_5.addWidget(self.Connect)
        self.Connect.clicked.connect(self.FTPconnect)
        self.List = QtWidgets.QPushButton(self.centralwidget)
        self.List.setObjectName("List")
        self.horizontalLayout_5.addWidget(self.List)
        self.List.clicked.connect(self.FTPlist)
        self.verticalLayout.addLayout(self.horizontalLayout_5)
        self.Conrslt = QtWidgets.QLabel(self.centralwidget)
        self.Conrslt.setAutoFillBackground(True)
        self.Conrslt.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.Conrslt.setFrameShadow(QtWidgets.QFrame.Raised)
        self.Conrslt.setTextFormat(QtCore.Qt.RichText)
        self.Conrslt.setWordWrap(True)
        self.Conrslt.setOpenExternalLinks(True)
        self.Conrslt.setObjectName("Conrslt")
        self.verticalLayout.addWidget(self.Conrslt)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.Add = QtWidgets.QPushButton(self.centralwidget)
        self.Add.setObjectName("Add")
        self.horizontalLayout_2.addWidget(self.Add)
        self.Add.clicked.connect(self.FTPadd)
        self.Delete = QtWidgets.QPushButton(self.centralwidget)
        self.Delete.setObjectName("Delete")
        self.horizontalLayout_2.addWidget(self.Delete)
        self.Delete.clicked.connect(self.FTPdelete)
        self.Folder = QtWidgets.QLineEdit(self.centralwidget)
        self.Folder.setObjectName("Folder")
        self.horizontalLayout_2.addWidget(self.Folder)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.Upload_2 = QtWidgets.QPushButton(self.centralwidget)
        self.Upload_2.setObjectName("Upload_2")
        self.horizontalLayout_3.addWidget(self.Upload_2)
        self.Upload_2.clicked.connect(self.FTPupload)
        self.Filepath_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.Filepath_2.setObjectName("Filepath_2")
        self.horizontalLayout_3.addWidget(self.Filepath_2)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.Download = QtWidgets.QPushButton(self.centralwidget)
        self.Download.setObjectName("Download")
        self.horizontalLayout_4.addWidget(self.Download)
        self.Download.clicked.connect(self.FTPdownload)
        self.Filename = QtWidgets.QLineEdit(self.centralwidget)
        self.Filename.setObjectName("Filename")
        self.horizontalLayout_4.addWidget(self.Filename)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.Output = QtWidgets.QTextBrowser(self.centralwidget)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(85, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 226, 253))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(245, 255, 199))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 85, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(179, 179, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 36, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 85, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 226, 253))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(245, 255, 199))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 85, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(179, 179, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 36, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 85, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 85, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 226, 253))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(245, 255, 199))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 85, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(179, 179, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 85, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 85, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        self.Output.setPalette(palette)
        self.Output.setAutoFillBackground(True)
        self.Output.setReadOnly(False)
        self.Output.setOverwriteMode(True)
        self.Output.setOpenExternalLinks(True)
        self.Output.setObjectName("Output")
        self.verticalLayout.addWidget(self.Output)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.About = QtWidgets.QPushButton(self.centralwidget)
        self.About.setObjectName("About")
        self.horizontalLayout_6.addWidget(self.About)
        self.Quit = QtWidgets.QPushButton(self.centralwidget)
        self.Quit.setObjectName("Quit")
        self.horizontalLayout_6.addWidget(self.Quit)
        self.verticalLayout.addLayout(self.horizontalLayout_6)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 493, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


            
    def FTPconnect(self):
        try:
            ftp_usr = self.ID.text()
            ftp_pwd = self.pswd.text()
            ftp_ip = self.IP.text()
            ftp = FTP(ftp_ip)
            ftp.login(user=ftp_usr, passwd = ftp_pwd)
            ftp.pwd()
            self.Output.setText(ftp.retrlines('LIST'))
            self.Conrslt.setText(ftp.getwelcome())
        except:
            self.Conrslt.setText("An exception has occurred")
            self.Output.setText("An execption has occured")


    def FTPlist(self):
        try:
            ftp_usr = self.ID.text()
            ftp_pwd = self.pswd.text()
            ftp_ip = self.IP.text()
            ftp = FTP(ftp_ip)
            ftp.login(user=ftp_usr, passwd = ftp_pwd)
            ftp.pwd()
            self.Conrslt.setText(ftp.getwelcome())
            self.Output.setText(ftp.retrlines('LIST'))
        except:
            self.Conrslt.setText("An exception has occurred")
            self.Output.setText("An execption has occured")
         
    def FTPdelete(self):
        try:
            folder = self.Folder.text()
            ftp_usr = self.ID.text()
            ftp_pwd = self.pswd.text()
            ftp_ip = self.IP.text()
            ftp = FTP(ftp_ip)
            ftp.login(user=ftp_usr, passwd = ftp_pwd)
            ftp.pwd()
            self.Conrslt.setText(ftp.getwelcome())
            ftp.rmd(folder)
        except:
            self.Conrslt.setText("An exception has occurred")
            self.Output.setText("An execption has occured") 

    def FTPadd(self):
        try:
            folder = self.Folder.text()
            ftp_usr = self.ID.text()
            ftp_pwd = self.pswd.text()
            ftp_ip = self.IP.text()
            ftp = FTP(ftp_ip)
            ftp.login(user=ftp_usr, passwd = ftp_pwd)
            ftp.pwd()
            self.Conrslt.setText(ftp.getwelcome())
            ftp.mkd(folder)
        except:
            self.Conrslt.setText("An exception has occurred")
            self.Output.setText("An execption has occured") 


    def FTPupload(self):
            ftp_usr = self.ID.text()
            ftp_pwd = self.pswd.text()
            ftp_ip = self.IP.text()
            ftp = FTP(ftp_ip)
            ftp.login(user=ftp_usr, passwd = ftp_pwd)
            ftp.pwd()
            up = self.Filepath_2.setText()

            try:
                uploadfile= open(up, 'rb')
                ftp.storlines('STOR ' + filename, uploadfile)
            except:
                self.Conrslt.setText("An exception has occurred")
                self.Output.setText("An execption has occured") 

    def FTPdownload (self):
        try:
            ftp_usr = self.ID.text()
            ftp_pwd = self.pswd.text()
            ftp_ip = self.IP.text()
            ftp = FTP(ftp_ip)
            ftp.login(user=ftp_usr, passwd = ftp_pwd)
            down = self.Filename.setText()
            source = down
            destination = "/home/user/downloads/"
            interval = 0.05
            def downloadFiles(path, destination):
                try:
                    ftp.cwd(path)       
                    os.chdir(destination)
                    mkdir_p(destination[0:len(destination)-1] + path)
                    print ("Created: " + destination[0:len(destination)-1] + path)
                except OSError:     
                    pass
                except ftplib.error_perm:       
                    print ("Error: could not change to " + path)
                    sys.exit("Ending Application")
                    filelist=ftp.nlst()

                for file in filelist:
                    time.sleep(interval)
                    try:            
                        ftp.cwd(path + file + "/")          
                        downloadFiles(path + file + "/", destination)
                    except ftplib.error_perm:
                        os.chdir(destination[0:len(destination)-1] + path) 
                        try:
                            ftp.retrbinary("RETR " + file, open(os.path.join(destination + path, file),"wb").write)
                        except:
                            print ("Error: File could not be downloaded " + file)
                return
    
            def mkdir_p(path):
                try:
                    os.makedirs(path)
                except OSError as exc:
                    if exc.errno == errno.EEXIST and os.path.isdir(path):
                        pass
                    else:
                        raise
            downloadFiles(source, destination)
        except:
            self.Conrslt.setText("An exception has occurred")
            self.Output.setText("An execption has occured") 



        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SimpleFTP"))
        self.label.setText(_translate("MainWindow", "   IP"))
        self.label_2.setText(_translate("MainWindow", "  Client"))
        self.label_3.setText(_translate("MainWindow", "password"))
        self.Connect.setText(_translate("MainWindow", "Connect"))
        self.List.setText(_translate("MainWindow", "List"))
        self.Conrslt.setText(_translate("MainWindow", "Waiting to connect..."))
        self.Add.setText(_translate("MainWindow", "Add Folder"))
        self.Delete.setText(_translate("MainWindow", "Delete"))
        self.Upload_2.setText(_translate("MainWindow", "Upload"))
        self.Download.setText(_translate("MainWindow", "Download"))
        self.Output.setPlaceholderText(_translate("MainWindow", "Here you see the results.."))
        self.About.setText(_translate("MainWindow", "About"))
        self.Quit.setText(_translate("MainWindow", "Quit"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

